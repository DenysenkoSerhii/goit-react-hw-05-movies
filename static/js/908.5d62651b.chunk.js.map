{"version":3,"file":"static/js/908.5d62651b.chunk.js","mappings":"kOAqEA,UAhEqB,WACjB,OAA0BA,EAAAA,EAAAA,UAAS,CAC/BC,MAAO,GACPC,SAAS,EACTC,MAAO,OAHX,eAAOC,EAAP,KAAcC,EAAd,KAKOC,GAAMC,EAAAA,EAAAA,MAAND,IAEPE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAU,mCAAG,oGAEXJ,GAAS,SAAAK,GAAS,yBACXA,GADW,IAEdR,SAAS,EACTC,MAAO,MAHO,IAFP,UAQUQ,EAAAA,EAAAA,IAAgBL,GAR1B,OAQLM,EARK,OASXP,GAAS,SAAAK,GACL,OAAO,kBACAA,GADP,IAEIT,MAAOW,GAEd,IAdU,gDAgBXP,GAAS,SAAAK,GAAS,yBACXA,GADW,IAEdP,MAAK,MAFS,IAhBP,yBAsBXE,GAAS,SAAAK,GACL,OAAO,kBACAA,GADP,IAEIR,SAAS,GAEhB,IA3BU,4EAAH,qDA+BhBO,GACH,GAAE,CAACH,EAAID,IAER,IAAQJ,EAAUG,EAAVH,MAGFY,EAAWZ,EAAMa,KAAI,gBAFTC,EAEWT,EAAF,EAAEA,GAAIU,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,aAAvB,OACvB,2BACI,kCAAUF,EAAV,QACA,uCAAeC,EAAf,QACA,0BACA,gBAAKE,KAPKJ,EAOUG,EAPX,yCAA2CH,IAOjBK,IAAKJ,QAJnCV,EADc,IAW3B,OACI,gBAAKe,UAAU,YAAf,UACI,wBAAKR,KAGhB,C,sLCjEKS,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,gCACTC,OAAQ,CACJC,QAAS,sCAKJC,EAAS,mCAAG,sGACAL,EAASM,IAAI,qBAAsB,CACpDH,OAAQ,CAAC,IAFQ,uBACdI,EADc,EACdA,KADc,kBAOdA,EAAKC,SAPS,2CAAH,qDAUTC,EAAc,mCAAG,WAAMzB,GAAN,yFACLgB,EAASM,IAAT,gBAAsBtB,IADjB,uBACnBuB,EADmB,EACnBA,KADmB,kBAGnBA,GAHmB,2CAAH,sDAMdG,EAAY,mCAAG,WAAOC,GAAP,yFACHX,EAASM,IAAI,gBAAiB,CAC/CH,OAAQ,CACJQ,MAAAA,KAHgB,uBACjBJ,EADiB,EACjBA,KADiB,kBAOjBA,EAAKC,SAPY,2CAAH,sDAUZI,EAAgB,mCAAG,WAAM5B,GAAN,yFACPgB,EAASM,IAAT,iBAAuBtB,EAAvB,aADO,uBACrBuB,EADqB,EACrBA,KADqB,kBAGrBA,EAAKC,SAHgB,2CAAH,sDAMhBnB,EAAe,mCAAG,WAAML,GAAN,yFACNgB,EAASM,IAAT,iBAAuBtB,EAAvB,aADM,uBACpBuB,EADoB,EACpBA,KACXM,QAAQC,IAAIP,EAAKQ,MAFc,kBAGpBR,EAAKQ,MAHe,2CAAH,qD","sources":["pages/MovieCredits/MovieCredits.jsx","shared/api/movies.js"],"sourcesContent":["import {useState, useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nimport { getMovieCredits } from \"../../shared/api/movies\";\n\nconst MovieCredits = () => {\n    const [state, setState] = useState({\n        items: [],\n        loading: false,\n        error: null,\n        });\n    const {id} = useParams();\n\n    useEffect(()=> {\n        const fetchPosts = async() => {\n            try {\n                setState(prevState => ({\n                    ...prevState,\n                    loading: true,\n                    error: null,\n                }));\n    \n                const result = await getMovieCredits(id);\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        items: result,\n                    }\n                })\n            } catch (error) {\n                setState(prevState => ({\n                    ...prevState,\n                    error,\n                }))\n            }\n            finally {\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        loading: false,\n                    }\n                })\n            }\n        };\n\n        fetchPosts();\n    }, [id, setState]);\n\n    const { items } = state;\n    const imagePath =(path)=> `https://image.tmdb.org/t/p/w500${path}`;\n\n    const elements = items.map(({id, name, character, profile_path}) => (\n        <li key={id}>\n            <p>Name: {name}.</p>\n            <p>Character: {character}.</p>\n            <div>\n            <img src={imagePath(profile_path)} alt={name} />\n            </div>\n            \n        </li>\n    ))\n\n    return (\n        <div className=\"container\">\n            <ul>{elements}</ul>\n        </div>\n    )\n}\n\nexport default MovieCredits;","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\",\n    params: {\n        api_key: '81e207fecffa1302d8e26d6b5f9ddafd',\n    }\n});\n\n\nexport const getMovies = async() => {\n    const {data} = await instance.get(\"trending/movie/day\", {\n        params: {\n          \n        }\n    });\n    \n    return data.results;\n}\n\nexport const getSingleMovie = async(id) => {\n    const {data} = await instance.get(`movie/${id}`);\n\n    return data;\n}\n\nexport const searchMovies = async (query) => {\n    const {data} = await instance.get(\"/search/movie\", {\n        params: {\n            query,\n        }\n    });\n    \n    return data.results;\n}\n\nexport const getMovieComments = async(id) => {\n    const {data} = await instance.get(`/movie/${id}/reviews`);\n\n    return data.results;\n}\n\nexport const getMovieCredits = async(id) => {\n    const {data} = await instance.get(`/movie/${id}/credits`);\nconsole.log(data.cast);\n    return data.cast;\n}"],"names":["useState","items","loading","error","state","setState","id","useParams","useEffect","fetchPosts","prevState","getMovieCredits","result","elements","map","path","name","character","profile_path","src","alt","className","instance","axios","baseURL","params","api_key","getMovies","get","data","results","getSingleMovie","searchMovies","query","getMovieComments","console","log","cast"],"sourceRoot":""}